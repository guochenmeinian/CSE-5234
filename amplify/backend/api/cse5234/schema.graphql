type Inventory
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] },
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  product: Product @belongsTo(fields: ["product_id"])
  product_id: ID!
  quantity: Int!
  reorderLevel: Int
  lastUpdated: AWSDateTime
}

type Product
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] },
      { allow: private, operations: [read] },
      { allow: public, operations: [read] }
    ]
  ) {
    id: ID!
    title: String!
    description: String!
    image: String
    onSale: Boolean
    price: Float!
    orders: [ProductOrder] @hasMany
    inventory: Inventory @hasOne
  }

type ProductOrder 
  @model(queries: null, subscriptions: null)
  @auth(
    rules: [
      { allow: owner, identityClaim: "email"}
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
    id: ID!
    product_id: ID!
    order_id: ID!
    product: Product @belongsTo(fields: ["product_id"])
    order: Order @belongsTo(fields: ["order_id"])
  }

type Order
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, identityClaim: "email" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
    id: ID!
    user: String!
    date: AWSDateTime
    total: Float
    products: [ProductOrder] @hasMany
  }

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  cart: [CartItem]
  total: Float!
  token: String!
  address: String!
}

input ProcessProductInput {
  title: String!
  description: String!
  image: String
  onSale: Boolean
  price: Float!
  quantity: Int!
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "processPayment-${env}")
    @function(name: "processShipping-${env}")
    @function(name: "createOrder-${env}")
  processProduct(input: ProcessProductInput!): Product
    @function(name: "createProduct-${env}")
}
